module "eks" {
  source                        = "terraform-aws-modules/eks/aws"
  version                       = "17.24.0"
  cluster_name                  = var.cluster_name
  cluster_version               = "1.21"
  subnets                       = aws_subnet.eks_private_subnet[*].id
  vpc_id                        = var.vpc_id
  node_groups                   = local.node_groups
  enable_irsa                   = true
  cluster_log_retention_in_days = 14

  worker_additional_security_group_ids = concat(tolist([
    // communicate with eco apps
    data.aws_security_group.main_sg.id,
    // communicate with load_balancer
    data.aws_security_group.public_sg.id]),
  var.additional_security_groups)
  workers_additional_policies          = concat(tolist([
    aws_iam_policy.eks_worker_additional_policy.arn]), var.workers_additional_policies)

  map_users = var.map_users
  map_roles = var.map_roles

  cluster_enabled_log_types = [
    "api",
    "scheduler",
    "controllerManager"
  ]

  tags       = {
    cluster    = "${var.resource_prefix}-EKS"
    Name       = var.cluster_name
    Deployment = var.resource_prefix
  }
  depends_on = [
    aws_subnet.eks_private_subnet,
    aws_subnet.eks_public_subnet,
    aws_nat_gateway.eks_nat_gateway]
}

// Additional Policy for EKS Workers
resource "aws_iam_policy" "eks_worker_additional_policy" {
  name        = "${var.cluster_name}_worker_policy"
  path        = "/"
  description = "Additional worker policy for worker nodes of cluster: ${var.cluster_name}"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:*",
        ]
        Effect   = "Allow"
        Resource = "arn:aws:logs:*:*:log-group:/aws/eks/${var.resource_prefix}*:*"
      },
    ]
  })

  tags       = {
    Name       = "${var.cluster_name}_worker_policy"
    Deployment = var.resource_prefix
  }
}

output "cluster_id" {
  description = "EKS cluster ID."
  value       = module.eks.cluster_id
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane."
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane."
  value       = module.eks.cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module."
  value       = module.eks.kubeconfig
}

output "config_map_aws_auth" {
  description = "A kubernetes configuration to authenticate to this EKS cluster."
  value       = module.eks.config_map_aws_auth
}

output "cluster_name" {
  description = "Kubernetes Cluster Name"
  value       = var.cluster_name
}

output "cluster_oidc_issuer_url" {
  description = "The URL of the EKS cluster OIDC Issuer"
  value       = module.eks.cluster_oidc_issuer_url
}

output "oidc_provider_arn" {
  description = "The ARN of the OIDC Provider"
  value       = module.eks.oidc_provider_arn
}

output "cluster_iam_role_arn" {
  description = "IAM role ARN of the EKS cluster"
  value       = module.eks.cluster_iam_role_arn
}

output "cluster_iam_role_name" {
  description = "IAM role NAME of the EKS cluster"
  value       = module.eks.cluster_iam_role_name
}

output "worker_iam_role_name" {
  description = "IAM role name for EKS worker groups"
  value       = module.eks.worker_iam_role_name
}

output "worker_iam_role_arn" {
  description = "IAM role ARN for EKS worker groups"
  value       = module.eks.worker_iam_role_arn
}
